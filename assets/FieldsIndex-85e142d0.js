import{c2 as N,c3 as S,c4 as p,c5 as y,c6 as b,bi as B,as as O,c7 as T,c8 as F,c9 as q,ca as z,cb as D,cc as f}from"./index-8b5e7d9b.js";function R(t){return"timeZone"in t}function L(t){return"timeZone"in t}function $(t){return"dateFieldsTimeZone"in t}class m{static fromJSON(e){return new m(e.fields,e.timeZoneByFieldName)}static fromLayer(e){return new m(e.fields??[],g(e))}static fromLayerJSON(e){return new m(e.fields??[],g(e))}constructor(e=[],s){this._fieldsMap=new Map,this._normalizedFieldsMap=new Map,this._dateFieldsSet=new Set,this._numericFieldsSet=new Set,this._requiredFields=null,this.dateFields=[],this.numericFields=[],this.fields=e||[],this._timeZoneByFieldName=s?new Map(s):null;const n=[];for(const i of this.fields){const d=i?.name,o=_(d);if(d&&o){const l=r(d);this._fieldsMap.set(d,i),this._fieldsMap.set(l,i),this._normalizedFieldsMap.set(o,i),n.push(`${l}:${i.type}:${this._timeZoneByFieldName?.get(d)}`),N(i)?(this.dateFields.push(i),this._dateFieldsSet.add(i)):S(i)&&(this._numericFieldsSet.add(i),this.numericFields.push(i)),p(i)||y(i)||(i.editable=i.editable==null||!!i.editable,i.nullable=i.nullable==null||!!i.nullable)}}n.sort(),this.uid=n.join()}get requiredFields(){if(!this._requiredFields){this._requiredFields=[];for(const e of this.fields)p(e)||y(e)||e.nullable||b(e)!==void 0||this._requiredFields.push(e)}return this._requiredFields}equals(e){return this.uid===e?.uid}has(e){return this.get(e)!=null}get(e){if(!e)return;let s=this._fieldsMap.get(e);return s||(s=this._fieldsMap.get(r(e))??this._normalizedFieldsMap.get(_(e)),s&&this._fieldsMap.set(e,s),s)}getTimeZone(e){const s=this.get(e&&typeof e!="string"?e.name:e);return s?this._timeZoneByFieldName?this._timeZoneByFieldName.get(s.name):s.type==="date"||s.type==="esriFieldTypeDate"?(B.getLogger("esri.layers.support.FieldsIndex").error(new O("getTimeZone:no-timezone-information",`no time zone information for field '${s.name}'`)),T):w.has(s.type)?F:null:null}isDateField(e){return this._dateFieldsSet.has(this.get(e))}isTimeOnlyField(e){return q(this.get(e))}isNumericField(e){return this._numericFieldsSet.has(this.get(e))}normalizeFieldName(e){return this.get(e)?.name??void 0}toJSON(){return{fields:this.fields.map(e=>z(e)?e.toJSON():e),timeZoneByFieldName:this._timeZoneByFieldName?Array.from(this._timeZoneByFieldName.entries()):null}}}function r(t){return t.trim().toLowerCase()}function _(t){return D(t)?.toLowerCase()??""}const w=new Set(["time-only","date-only","timestamp-offset","esriFieldTypeDateOnly","esriFieldTypeTimeOnly","esriFieldTypeTimestampOffset"]);function g(t){const e=new Map;if(!t.fields)return e;const s=t.datesInUnknownTimezone===!0,{timeInfo:n,editFieldsInfo:i}=t,d=(n?"startField"in n?n.startField:n.startTimeField:"")??"",o=(n?"endField"in n?n.endField:n.endTimeField:"")??"",l=$(t)?t.dateFieldsTimeZone??null:t.dateFieldsTimeReference?f(t.dateFieldsTimeReference):null,h=i?R(i)?i.timeZone??l:i.dateFieldsTimeReference?f(i.dateFieldsTimeReference):l??T:null,c=n?L(n)?n.timeZone??l:n.timeReference?f(n.timeReference):l:null,Z=new Map([[r(i?.creationDateField??""),h],[r(i?.editDateField??""),h],[r(d),c],[r(o),c]]);for(const{name:a,type:u}of t.fields)if(w.has(u))e.set(a,F);else if(u!=="date"&&u!=="esriFieldTypeDate")e.set(a,null);else if(s)e.set(a,F);else{const M=Z.get(r(a??""))??l;e.set(a,M)}return e}export{m as c};
