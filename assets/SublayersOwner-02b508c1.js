import{ah as s,ai as n,az as b,ch as z,bd as Z,ak as q,bR as ee,kt as J,ay as Q,di as y,dC as H,au as N,cj as W,jY as te,ap as re,al as ie,as as g,ku as ae,cJ as se,kv as le,bi as w,cF as oe,aG as U,aw as ne,bL as P,ax as pe,cH as F,dT as ye,f4 as R,cM as ue,fp as M,cm as v,cX as de,gj as G,fs as ce,dw as E,hM as fe,bk as he,aH as be,aI as me,kw as ge}from"./index-8b5e7d9b.js";import{I as Se,y as Ie}from"./commonProperties-60f31277.js";import"./UniqueValueRenderer-176db886.js";import{m as ve,u as we}from"./jsonUtils-3d6448c4.js";import{x as Ee}from"./QueryTask-39d65650.js";import{n as Le}from"./FeatureType-347e5e8f.js";import{c as xe}from"./FieldsIndex-85e142d0.js";import{C as Oe}from"./LabelClass-06cdad9c.js";import{c as Te}from"./labelingInfo-4784a348.js";import{p as De}from"./LayerFloorInfo-5c97dc41.js";import{a as Fe}from"./serviceCapabilitiesUtils-1513785a.js";import{c as k,b as _e,K}from"./Query-630c5d65.js";import{c as Pe}from"./AttachmentQuery-ac66f9a7.js";import{p as Ae}from"./popupUtils-6f3d55df.js";import{o as Me}from"./sublayerUtils-109579ed.js";const Ye=e=>{let t=class extends e{constructor(){super(...arguments),this.capabilities=void 0,this.copyright=null,this.fullExtent=null,this.legendEnabled=!0,this.spatialReference=null,this.version=void 0,this._allLayersAndTablesMap=null}readCapabilities(r,i){const a=i.capabilities&&i.capabilities.split(",").map(Y=>Y.toLowerCase().trim());if(!a)return{operations:{supportsExportMap:!1,supportsExportTiles:!1,supportsIdentify:!1,supportsQuery:!1,supportsTileMap:!1},exportMap:null,exportTiles:null};const l=this.type,p=l!=="tile"&&!!i.supportsDynamicLayers,u=a.includes("query"),c=a.includes("map"),m=!!i.exportTilesAllowed,S=a.includes("tilemap"),L=a.includes("data"),x=l!=="tile"&&(!i.tileInfo||p),O=l!=="tile"&&(!i.tileInfo||p),d=l!=="tile",f=i.cimVersion&&ee.parse(i.cimVersion),T=f?.since(1,4)??!1,D=f?.since(2,0)??!1;return{operations:{supportsExportMap:c,supportsExportTiles:m,supportsIdentify:u,supportsQuery:L,supportsTileMap:S},exportMap:c?{supportsArcadeExpressionForLabeling:T,supportsSublayersChanges:d,supportsDynamicLayers:p,supportsSublayerVisibility:x,supportsSublayerDefinitionExpression:O,supportsCIMSymbols:D}:null,exportTiles:m?{maxExportTilesCount:+i.maxExportTilesCount}:null}}readVersion(r,i){let a=i.currentVersion;return a||(a=i.hasOwnProperty("capabilities")||i.hasOwnProperty("tables")?10:i.hasOwnProperty("supportedImageFormatTypes")?9.31:9.3),a}async fetchRelatedService(r){const i=this.portalItem;if(!i||!J(i))return null;this._relatedFeatureServicePromise||(this._relatedFeatureServicePromise=i.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},r).then(l=>l.find(p=>p.type==="Feature Service")??null,()=>null));const a=await this._relatedFeatureServicePromise;return Q(r),a?{itemId:a.id,url:a.url}:null}async fetchSublayerInfo(r,i){const{source:a}=r;if(this?.portalItem&&this.type==="tile"&&a?.type==="map-layer"&&J(this.portalItem)&&r.originIdOf("url")<y.SERVICE){const u=await this.fetchRelatedService(i);u&&(r.url=H(u.url,a.mapLayerId.toString()),r.layerItemId=u.itemId)}const{url:l}=r;let p;if(a.type==="data-layer")p=(await N(l,{responseType:"json",query:{f:"json",...this.customParameters,token:this.apiKey},...i})).data;else if(l&&r.originIdOf("url")>y.SERVICE)try{const u=await this._fetchAllLayersAndTablesFromService(l),c=W(l)?.sublayer??a.mapLayerId;p=u.get(c)}catch{}else{let u=r.id;a?.type==="map-layer"&&(u=a.mapLayerId);try{p=(await this.fetchAllLayersAndTables(i)).get(u)}catch{}}return p}async fetchAllLayersAndTables(r){return this._fetchAllLayersAndTablesFromService(this.parsedUrl?.path,r)}async _fetchAllLayersAndTablesFromService(r,i){await this.load(i),this._allLayersAndTablesMap||(this._allLayersAndTablesMap=new Map);const a=W(r),l=te(this._allLayersAndTablesMap,a?.url.path,()=>N(H(a?.url.path,"/layers"),{responseType:"json",query:{f:"json",...this.customParameters,token:this.apiKey}}).then(u=>{const c=new Map;for(const m of u.data.layers)c.set(m.id,m);return{result:c}},u=>({error:u}))),p=await l;if(Q(i),"result"in p)return p.result;throw p.error}};return s([n({readOnly:!0})],t.prototype,"capabilities",void 0),s([b("service","capabilities",["capabilities","exportTilesAllowed","maxExportTilesCount","supportsDynamicLayers","tileInfo"])],t.prototype,"readCapabilities",null),s([n({json:{read:{source:"copyrightText"}}})],t.prototype,"copyright",void 0),s([n({type:z})],t.prototype,"fullExtent",void 0),s([n(Se)],t.prototype,"id",void 0),s([n({type:Boolean,json:{origins:{service:{read:{enabled:!1}}},read:{source:"showLegend"},write:{target:"showLegend"}}})],t.prototype,"legendEnabled",void 0),s([n(Ie)],t.prototype,"popupEnabled",void 0),s([n({type:Z})],t.prototype,"spatialReference",void 0),s([n({readOnly:!0})],t.prototype,"version",void 0),s([b("version",["currentVersion","capabilities","tables","supportedImageFormatTypes"])],t.prototype,"readVersion",null),t=s([q("esri.layers.mixins.ArcGISMapService")],t),t};var A;function j(e){return e!=null&&e.type==="esriSMS"}function V(e,t,r){const i=this.originIdOf(t)>=E(r.origin);return{ignoreOrigin:!0,allowNull:i,enabled:!!r&&r.layer?.type==="map-image"&&(r.writeSublayerStructure||i)}}function C(e,t,r){return{enabled:!!r&&r.layer?.type==="tile"&&(r.origin&&this.originIdOf(t)>=E(r.origin)||this._isOverridden(t))}}function h(e,t,r){return{ignoreOrigin:!0,enabled:r&&r.writeSublayerStructure||!1}}function _(e,t,r){return{ignoreOrigin:!0,enabled:!!r&&(r.writeSublayerStructure||this.originIdOf(t)>=E(r.origin))}}let je=0;const I=new Set;I.add("layer"),I.add("parent"),I.add("loaded"),I.add("loadStatus"),I.add("loadError"),I.add("loadWarnings");let o=A=class extends re(ie(fe)){constructor(e){super(e),this.capabilities=void 0,this.maxScaleRange={minScale:0,maxScale:0},this.fields=null,this.fullExtent=null,this.geometryType=null,this.globalIdField=null,this.legendEnabled=!0,this.objectIdField=null,this.parent=null,this.popupEnabled=!0,this.popupTemplate=null,this.sourceJSON=null,this.title=null,this.typeIdField=null,this.type="sublayer",this.types=null,this._lastParsedUrl=null}async load(e){return this.addResolvingPromise((async()=>{const{layer:t,url:r}=this;if(!t&&!r)throw new g("sublayer:missing-layer","Sublayer can't be loaded without being part of a layer",{sublayer:this});const i=t?await t.fetchSublayerInfo(this,e):(await N(r,{responseType:"json",query:{f:"json"},...e})).data;i&&(this.sourceJSON=i,this.read({layerDefinition:i},{origin:"service"}))})()),this}readCapabilities(e,t){t=t.layerDefinition||t;const{operations:{supportsQuery:r,supportsQueryAttachments:i},query:{supportsFormatPBF:a},data:{supportsAttachment:l}}=Fe(t,this.url);return{exportMap:{supportsModification:!!t.canModifyLayer},operations:{supportsQuery:r,supportsQueryAttachments:i},data:{supportsAttachment:l},query:{supportsFormatPBF:a}}}get defaultPopupTemplate(){return this.createPopupTemplate()}set definitionExpression(e){this._setAndNotifyLayer("definitionExpression",e)}get effectiveScaleRange(){const{minScale:e,maxScale:t}=this;return{minScale:e,maxScale:t}}readMaxScaleRange(e,t){return{minScale:(t=t.layerDefinition||t).minScale??0,maxScale:t.maxScale??0}}get fieldsIndex(){return new xe(this.fields||[])}set floorInfo(e){this._setAndNotifyLayer("floorInfo",e)}readGlobalIdFieldFromService(e,t){if((t=t.layerDefinition||t).globalIdField)return t.globalIdField;if(t.fields){for(const r of t.fields)if(r.type==="esriFieldTypeGlobalID")return r.name}}get id(){return this._get("id")??je++}set id(e){this._get("id")!==e&&(this.layer?.capabilities?.exportMap?.supportsDynamicLayers!==!1?this._set("id",e):this._logLockedError("id","capability not available 'layer.capabilities.exportMap.supportsDynamicLayers'"))}set labelingInfo(e){this._setAndNotifyLayer("labelingInfo",e)}writeLabelingInfo(e,t,r,i){e&&e.length&&(t.layerDefinition={drawingInfo:{labelingInfo:e.map(a=>a.write({},i))}})}set labelsVisible(e){this._setAndNotifyLayer("labelsVisible",e)}set layer(e){this._set("layer",e),this.sublayers&&this.sublayers.forEach(t=>t.layer=e)}set listMode(e){this._set("listMode",e)}set minScale(e){this._setAndNotifyLayer("minScale",e)}readMinScale(e,t){return t.minScale||t.layerDefinition?.minScale||0}set maxScale(e){this._setAndNotifyLayer("maxScale",e)}readMaxScale(e,t){return t.maxScale||t.layerDefinition?.maxScale||0}readObjectIdFieldFromService(e,t){if((t=t.layerDefinition||t).objectIdField)return t.objectIdField;if(t.fields){for(const r of t.fields)if(r.type==="esriFieldTypeOID")return r.name}}set opacity(e){this._setAndNotifyLayer("opacity",e)}readOpacity(e,t){const r=t.layerDefinition;return 1-.01*((r?.transparency!=null?r.transparency:r?.drawingInfo?.transparency)??0)}writeOpacity(e,t,r,i){t.layerDefinition={drawingInfo:{transparency:100-100*e}}}writeParent(e,t){this.parent&&this.parent!==this.layer?t.parentLayerId=ae(this.parent.id):t.parentLayerId=-1}get queryTask(){if(!this.layer)return null;const{spatialReference:e}=this.layer,t="gdbVersion"in this.layer?this.layer.gdbVersion:void 0,{capabilities:r,fieldsIndex:i}=this,a=se("featurelayer-pbf")&&r?.query.supportsFormatPBF,l=r?.operations?.supportsQueryAttachments??!1;return new Ee({url:this.url,pbfSupported:a,fieldsIndex:i,gdbVersion:t,sourceSpatialReference:e,queryAttachmentsSupported:l})}set renderer(e){if(e){for(const t of e.getSymbols())if(le(t)){w.getLogger(this).warn("Sublayer renderer should use 2D symbols");break}}this._setAndNotifyLayer("renderer",e)}get source(){return this._get("source")||new k({mapLayerId:this.id})}set source(e){this._setAndNotifyLayer("source",e)}set sublayers(e){this._handleSublayersChange(e,this._get("sublayers")),this._set("sublayers",e)}castSublayers(e){return oe(U.ofType(A),e)}writeSublayers(e,t,r){this.sublayers?.length&&(t[r]=this.sublayers.map(i=>i.id).toArray().reverse())}readTitle(e,t){return t.layerDefinition?.name??t.name}readTypeIdField(e,t){let r=(t=t.layerDefinition||t).typeIdField;if(r&&t.fields){r=r.toLowerCase();const i=t.fields.find(a=>a.name.toLowerCase()===r);i&&(r=i.name)}return r}get url(){const e=this.layer?.parsedUrl??this._lastParsedUrl,t=this.source;if(!e)return null;if(this._lastParsedUrl=e,t?.type==="map-layer")return`${e.path}/${t.mapLayerId}`;const r={layer:JSON.stringify({source:this.source})};return`${e.path}/dynamicLayer?${ne(r)}`}set url(e){this._overrideIfSome("url",e)}set visible(e){this._setAndNotifyLayer("visible",e)}writeVisible(e,t,r,i){t[r]=this.getAtOrigin("defaultVisibility","service")||e}clone(){const{store:e}=P(this),t=new A;return P(t).store=e.clone(I),this.commitProperty("url"),t._lastParsedUrl=this._lastParsedUrl,t}createPopupTemplate(e){return Ae(this,e)}createQuery(){return new _e({returnGeometry:!0,where:this.definitionExpression||"1=1"})}async createFeatureLayer(){if(this.hasOwnProperty("sublayers"))return null;const e=(await pe(()=>import("./FeatureLayer-72a3b1cd.js"),["./FeatureLayer-72a3b1cd.js","./index-8b5e7d9b.js","./index-5447a158.css","./UniqueValueRenderer-176db886.js","./ColorStop-ac9a118d.js","./diffUtils-3ed1f592.js","./colorRamps-cf6fa9ce.js","./jsonUtils-3d6448c4.js","./DictionaryLoader-1a1ab2cc.js","./FieldsIndex-85e142d0.js","./heatmapUtils-3c0e0ece.js","./FeatureLayerBase-56c03a7a.js","./commonProperties-60f31277.js","./ElevationInfo-36952bdf.js","./featureLayerUtils-d891b150.js","./featureQueryAll-778379dd.js","./Query-630c5d65.js","./AttachmentQuery-ac66f9a7.js","./RelationshipQuery-249800df.js","./LayerFloorInfo-5c97dc41.js","./serviceCapabilitiesUtils-1513785a.js","./editsZScale-03b9f186.js","./queryZScale-9dee68ff.js","./FeatureSet-05a1ff98.js","./APIKeyMixin-9d7343aa.js","./ArcGISService-1771a240.js","./BlendLayer-dce91235.js","./jsonUtils-16d33138.js","./CustomParametersMixin-45f14a7d.js","./EditBusLayer-3babd061.js","./FeatureEffectLayer-50d5188d.js","./FeatureEffect-40ff6b77.js","./FeatureFilter-5ab88729.js","./FeatureReductionLayer-826e078c.js","./FeatureReductionSelection-4ea33fb1.js","./LabelClass-06cdad9c.js","./defaults-4b2d7493.js","./defaultsJSON-59981e75.js","./MD5-715f37cd.js","./OperationalLayer-5c10068f.js","./OrderedLayer-b68b3bb4.js","./PortalLayer-c3739096.js","./ScaleRangeLayer-5b526f5a.js","./TemporalLayer-683091de.js","./FeatureTemplate-0e5c0008.js","./FeatureType-347e5e8f.js","./fieldProperties-49b9eb67.js","./labelingInfo-4784a348.js","./versionUtils-e8eeb271.js","./styleUtils-f17e2eb8.js","./TopFeaturesQuery-268791e0.js","./popupUtils-6f3d55df.js"],import.meta.url)).default,{layer:t,url:r}=this;let i;if(r&&this.originIdOf("url")>y.SERVICE)i=new e({url:r});else{if(!t?.parsedUrl)throw new g("createFeatureLayer:missing-information","Cannot create a FeatureLayer without a url or a parent layer");{const a=t.parsedUrl;i=new e({url:a.path}),a&&this.source&&(this.source.type==="map-layer"?i.layerId=this.source.mapLayerId:i.dynamicDataSource=this.source)}}return t?.refreshInterval!=null&&(i.refreshInterval=t.refreshInterval),this.definitionExpression&&(i.definitionExpression=this.definitionExpression),this.floorInfo&&(i.floorInfo=F(this.floorInfo)),this.originIdOf("labelingInfo")>y.SERVICE&&(i.labelingInfo=F(this.labelingInfo)),this.originIdOf("labelsVisible")>y.DEFAULTS&&(i.labelsVisible=this.labelsVisible),this.originIdOf("legendEnabled")>y.DEFAULTS&&(i.legendEnabled=this.legendEnabled),this.originIdOf("visible")>y.DEFAULTS&&(i.visible=this.visible),this.originIdOf("minScale")>y.DEFAULTS&&(i.minScale=this.minScale),this.originIdOf("maxScale")>y.DEFAULTS&&(i.maxScale=this.maxScale),this.originIdOf("opacity")>y.DEFAULTS&&(i.opacity=this.opacity),this.originIdOf("popupTemplate")>y.DEFAULTS&&(i.popupTemplate=F(this.popupTemplate)),this.originIdOf("renderer")>y.SERVICE&&(i.renderer=F(this.renderer)),this.source?.type==="data-layer"&&(i.dynamicDataSource=this.source.clone()),this.originIdOf("title")>y.DEFAULTS&&(i.title=this.title),t?.type==="map-image"&&t.originIdOf("customParameters")>y.DEFAULTS&&(i.customParameters=t.customParameters),t?.type==="tile"&&t.originIdOf("customParameters")>y.DEFAULTS&&(i.customParameters=t.customParameters),i}getField(e){return this.fieldsIndex.get(e)}getFeatureType(e){const{typeIdField:t,types:r}=this;if(!t||!e)return null;const i=e.attributes?e.attributes[t]:void 0;if(i==null)return null;let a=null;return r?.some(l=>{const{id:p}=l;return p!=null&&(p.toString()===i.toString()&&(a=l),!!a)}),a}getFieldDomain(e,t){const r=t?.feature,i=this.getFeatureType(r);if(i){const a=i.domains&&i.domains[e];if(a&&a.type!=="inherited")return a}return this._getLayerDomain(e)}async queryAttachments(e,t){await this.load(),e=Pe.from(e);const r=this.capabilities;if(!r?.data?.supportsAttachment)throw new g("queryAttachments:not-supported","this layer doesn't support attachments");const{attachmentTypes:i,objectIds:a,globalIds:l,num:p,size:u,start:c,where:m}=e;if(!r?.operations?.supportsQueryAttachments&&(i?.length>0||l?.length>0||u?.length>0||p||c||m))throw new g("queryAttachments:option-not-supported","when 'capabilities.operations.supportsQueryAttachments' is false, only objectIds is supported",e);if(!(a?.length||l?.length||m))throw new g("queryAttachments:invalid-query","'objectIds', 'globalIds', or 'where' are required to perform attachment query",e);return this.queryTask.executeAttachmentQuery(e,t)}async queryFeatures(e=this.createQuery(),t){if(await this.load(),!this.capabilities.operations.supportsQuery)throw new g("queryFeatures:not-supported","this layer doesn't support queries.");if(!this.url)throw new g("queryFeatures:not-supported","this layer has no url.");const r=await this.queryTask.execute(e,{...t,query:{...this.layer?.customParameters,token:this.layer?.apiKey}});if(r?.features)for(const i of r.features)i.sourceLayer=this;return r}toExportImageJSON(e){const t={id:this.id,source:this.source?.toJSON()||{mapLayerId:this.id,type:"mapLayer"}},r=ye(e,this.definitionExpression);r!=null&&(t.definitionExpression=r);const i=["renderer","labelingInfo","opacity","labelsVisible"].reduce((l,p)=>(l[p]=this.originIdOf(p),l),{});if(Object.keys(i).some(l=>i[l]>y.SERVICE)){const l=t.drawingInfo={};if(i.renderer>y.SERVICE&&(l.renderer=this.renderer?this.renderer.toJSON():null),i.labelsVisible>y.SERVICE&&(l.showLabels=this.labelsVisible),this.labelsVisible&&i.labelingInfo>y.SERVICE)if(this.labelingInfo){!this.loaded&&this.labelingInfo?.some(u=>!u.labelPlacement)&&w.getLogger(this).warnOnce(`A Sublayer (title: ${this.title}, id: ${this.id}) has an undefined 'labelPlacement' and so labels cannot be displayed. Either define a valid 'labelPlacement' or call Sublayer.load() to use a default value based on geometry type.`,{sublayer:this});let p=this.labelingInfo;this.geometryType!=null&&(p=Te(this.labelingInfo,R.toJSON(this.geometryType))),l.showLabels=!0,l.labelingInfo=p.filter(u=>u.labelPlacement).map(u=>u.toJSON({origin:"service",layer:this.layer}))}else l.showLabels=!1;i.opacity>y.SERVICE&&(l.transparency=100-100*this.opacity),this._assignDefaultSymbolColors(l.renderer)}return t}_assignDefaultSymbolColors(e){this._forEachSimpleMarkerSymbols(e,t=>{t.color||t.style!=="esriSMSX"&&t.style!=="esriSMSCross"||(t.outline?.color?t.color=t.outline.color:t.color=[0,0,0,0])})}_forEachSimpleMarkerSymbols(e,t){if(e){const r=("uniqueValueInfos"in e?e.uniqueValueInfos:"classBreakInfos"in e?e.classBreakInfos:null)??[];for(const i of r)j(i.symbol)&&t(i.symbol);"symbol"in e&&j(e.symbol)&&t(e.symbol),"defaultSymbol"in e&&j(e.defaultSymbol)&&t(e.defaultSymbol)}}_setAndNotifyLayer(e,t){const r=this.layer,i=this._get(e);let a,l;switch(e){case"definitionExpression":case"floorInfo":a="supportsSublayerDefinitionExpression";break;case"minScale":case"maxScale":case"visible":a="supportsSublayerVisibility";break;case"labelingInfo":case"labelsVisible":case"opacity":case"renderer":case"source":a="supportsDynamicLayers",l="supportsModification"}const p=P(this).getDefaultOrigin();if(p!=="service"){if(a&&this.layer?.capabilities?.exportMap?.[a]===!1)return void this._logLockedError(e,`capability not available 'layer.capabilities.exportMap.${a}'`);if(l&&this.capabilities?.exportMap[l]===!1)return void this._logLockedError(e,`capability not available 'capabilities.exportMap.${l}'`)}e!=="source"||this.loadStatus==="not-loaded"?(this._set(e,t),p!=="service"&&i!==t&&r&&r.emit&&r.emit("sublayer-update",{propertyName:e,target:this})):this._logLockedError(e,"'source' can't be changed after calling sublayer.load()")}_handleSublayersChange(e,t){t&&(t.forEach(r=>{r.parent=null,r.layer=null}),this.removeAllHandles()),e&&(e.forEach(r=>{r.parent=this,r.layer=this.layer}),this.addHandles([e.on("after-add",({item:r})=>{r.parent=this,r.layer=this.layer}),e.on("after-remove",({item:r})=>{r.parent=null,r.layer=null}),e.on("before-changes",r=>{const i=this.layer?.capabilities?.exportMap?.supportsSublayersChanges;i==null||i||(w.getLogger(this).error(new g("sublayer:sublayers-non-modifiable","Sublayer can't be added, moved, or removed from the layer's sublayers",{sublayer:this,layer:this.layer})),r.preventDefault())})]))}_logLockedError(e,t){const{layer:r,declaredClass:i}=this;w.getLogger(i).error(new g("sublayer:locked",`Property '${String(e)}' can't be changed on Sublayer from the layer '${r?.id}'`,{reason:t,sublayer:this,layer:r}))}_getLayerDomain(e){const t=this.fieldsIndex.get(e);return t?t.domain:null}};o.test={isMapImageLayerOverridePolicy:e=>e===h||e===V,isTileImageLayerOverridePolicy:e=>e===C},s([n({readOnly:!0})],o.prototype,"capabilities",void 0),s([b("service","capabilities",["layerDefinition.canModifyLayer","layerDefinition.capabilities"])],o.prototype,"readCapabilities",null),s([n()],o.prototype,"defaultPopupTemplate",null),s([n({type:String,value:null,json:{name:"layerDefinition.definitionExpression",write:{allowNull:!0,overridePolicy:V}}})],o.prototype,"definitionExpression",null),s([n({readOnly:!0})],o.prototype,"effectiveScaleRange",null),s([b("service","maxScaleRange",["minScale","maxScale"])],o.prototype,"readMaxScaleRange",null),s([n({type:[ue],json:{origins:{service:{read:{source:"layerDefinition.fields"}}}}})],o.prototype,"fields",void 0),s([n({readOnly:!0})],o.prototype,"fieldsIndex",null),s([n({type:De,value:null,json:{name:"layerDefinition.floorInfo",read:{source:"layerDefinition.floorInfo"},write:{target:"layerDefinition.floorInfo",overridePolicy:V},origins:{"web-scene":{read:!1,write:!1}}}})],o.prototype,"floorInfo",null),s([n({type:z,json:{read:{source:"layerDefinition.extent"}}})],o.prototype,"fullExtent",void 0),s([n({type:R.apiValues,json:{origins:{service:{name:"layerDefinition.geometryType",read:{reader:R.read}}}}})],o.prototype,"geometryType",void 0),s([n({type:String})],o.prototype,"globalIdField",void 0),s([b("service","globalIdField",["layerDefinition.globalIdField","layerDefinition.fields"])],o.prototype,"readGlobalIdFieldFromService",null),s([n({type:M,json:{write:{ignoreOrigin:!0}}})],o.prototype,"id",null),s([n({value:null,type:[Oe],json:{read:{source:"layerDefinition.drawingInfo.labelingInfo"},write:{target:"layerDefinition.drawingInfo.labelingInfo",overridePolicy:h}}})],o.prototype,"labelingInfo",null),s([v("labelingInfo")],o.prototype,"writeLabelingInfo",null),s([n({type:Boolean,value:!0,json:{read:{source:"layerDefinition.drawingInfo.showLabels"},write:{target:"layerDefinition.drawingInfo.showLabels",overridePolicy:h}}})],o.prototype,"labelsVisible",null),s([n({value:null})],o.prototype,"layer",null),s([n({type:String,json:{write:{overridePolicy:C}}})],o.prototype,"layerItemId",void 0),s([n({type:Boolean,value:!0,json:{origins:{service:{read:{enabled:!1}}},read:{source:"showLegend"},write:{target:"showLegend",overridePolicy:_}}})],o.prototype,"legendEnabled",void 0),s([n({type:["show","hide","hide-children"],value:"show",json:{read:!1,write:!1,origins:{"web-scene":{read:!0,write:!0}}}})],o.prototype,"listMode",null),s([n({type:Number,value:0,json:{write:{overridePolicy:h}}})],o.prototype,"minScale",null),s([b("minScale",["minScale","layerDefinition.minScale"])],o.prototype,"readMinScale",null),s([n({type:Number,value:0,json:{write:{overridePolicy:h}}})],o.prototype,"maxScale",null),s([b("maxScale",["maxScale","layerDefinition.maxScale"])],o.prototype,"readMaxScale",null),s([n({type:String})],o.prototype,"objectIdField",void 0),s([b("service","objectIdField",["layerDefinition.objectIdField","layerDefinition.fields"])],o.prototype,"readObjectIdFieldFromService",null),s([n({type:Number,value:1,json:{write:{target:"layerDefinition.drawingInfo.transparency",overridePolicy:h}}})],o.prototype,"opacity",null),s([b("opacity",["layerDefinition.drawingInfo.transparency","layerDefinition.transparency"])],o.prototype,"readOpacity",null),s([v("opacity")],o.prototype,"writeOpacity",null),s([n({json:{type:M,write:{target:"parentLayerId",writerEnsuresNonNull:!0,overridePolicy:h}}})],o.prototype,"parent",void 0),s([v("parent")],o.prototype,"writeParent",null),s([n({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy:_,writer(e,t,r){t[r]=!e}}}})],o.prototype,"popupEnabled",void 0),s([n({type:de,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy:_}}})],o.prototype,"popupTemplate",void 0),s([n({readOnly:!0})],o.prototype,"queryTask",null),s([n({types:ve,value:null,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:h},origins:{"web-scene":{types:we,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:h}}}}})],o.prototype,"renderer",null),s([n({types:{key:"type",base:null,typeMap:{"data-layer":K,"map-layer":k}},cast(e){if(e){if("mapLayerId"in e)return G(k,e);if("dataSource"in e)return G(K,e)}return e},json:{name:"layerDefinition.source",write:{overridePolicy:h}}})],o.prototype,"source",null),s([n()],o.prototype,"sourceJSON",void 0),s([n({value:null,json:{type:[M],write:{target:"subLayerIds",allowNull:!0,overridePolicy:h}}})],o.prototype,"sublayers",null),s([ce("sublayers")],o.prototype,"castSublayers",null),s([v("sublayers")],o.prototype,"writeSublayers",null),s([n({type:String,json:{name:"name",write:{overridePolicy:_}}})],o.prototype,"title",void 0),s([b("service","title",["name","layerDefinition.name"])],o.prototype,"readTitle",null),s([n({type:String})],o.prototype,"typeIdField",void 0),s([n({json:{read:!1},readOnly:!0,value:"sublayer"})],o.prototype,"type",void 0),s([b("typeIdField",["layerDefinition.typeIdField"])],o.prototype,"readTypeIdField",null),s([n({type:[Le],json:{origins:{service:{read:{source:"layerDefinition.types"}}}}})],o.prototype,"types",void 0),s([n({type:String,json:{name:"layerUrl",write:{overridePolicy:C}}})],o.prototype,"url",null),s([n({type:Boolean,value:!0,json:{read:{source:"defaultVisibility"},write:{target:"defaultVisibility",overridePolicy:h}}})],o.prototype,"visible",null),s([v("visible")],o.prototype,"writeVisible",null),o=A=s([q("esri.layers.support.Sublayer")],o);const B=o,Ve=w.getLogger("esri.layers.TileLayer");function Ce(e,t){const r=[],i={};return e&&e.forEach(a=>{const l=new B;if(l.read(a,t),i[l.id]=l,a.parentLayerId!=null&&a.parentLayerId!==-1){const p=i[a.parentLayerId];p.sublayers||(p.sublayers=[]),p.sublayers.unshift(l)}else r.unshift(l)}),r}const $=U.ofType(B);function X(e,t){e&&e.forEach(r=>{t(r),r.sublayers&&r.sublayers.length&&X(r.sublayers,t)})}const Ze=e=>{let t=class extends e{constructor(...r){super(...r),this.allSublayers=new he({getCollections:()=>[this.sublayers],getChildrenFunction:i=>i.sublayers}),this.sublayersSourceJSON={[y.SERVICE]:{},[y.PORTAL_ITEM]:{},[y.WEB_SCENE]:{},[y.WEB_MAP]:{}},this.addHandles(be(()=>this.sublayers,(i,a)=>this._handleSublayersChange(i,a),me))}destroy(){this.allSublayers.destroy()}readSublayers(r,i){if(!i||!r)return;const{sublayersSourceJSON:a}=this,l=E(i.origin);if(l<y.SERVICE||(a[l]={context:i,visibleLayers:r.visibleLayers||a[l].visibleLayers,layers:r.layers||a[l].layers},l>y.SERVICE))return;this._set("serviceSublayers",this.createSublayersForOrigin("service").sublayers);const{sublayers:p,origin:u}=this.createSublayersForOrigin("web-document"),c=P(this);c.setDefaultOrigin(u),this._set("sublayers",new $(p)),c.setDefaultOrigin("user")}findSublayerById(r){return this.allSublayers.find(i=>i.id===r)}createServiceSublayers(){return this.createSublayersForOrigin("service").sublayers}createSublayersForOrigin(r){const i=E(r==="web-document"?"web-map":r);let a=y.SERVICE,l=this.sublayersSourceJSON[y.SERVICE].layers,p=this.sublayersSourceJSON[y.SERVICE].context,u=null;const c=[y.PORTAL_ITEM,y.WEB_SCENE,y.WEB_MAP].filter(d=>d<=i);for(const d of c){const f=this.sublayersSourceJSON[d];Me(f.layers)&&(a=d,l=f.layers,p=f.context,f.visibleLayers&&(u={visibleLayers:f.visibleLayers,context:f.context}))}const m=[y.PORTAL_ITEM,y.WEB_SCENE,y.WEB_MAP].filter(d=>d>a&&d<=i);let S=null;for(const d of m){const{layers:f,visibleLayers:T,context:D}=this.sublayersSourceJSON[d];f&&(S={layers:f,context:D}),T&&(u={visibleLayers:T,context:D})}const L=Ce(l,p),x=new Map,O=new Set;if(S)for(const d of S.layers)x.set(d.id,d);if(u?.visibleLayers)for(const d of u.visibleLayers)O.add(d);return X(L,d=>{S&&d.read(x.get(d.id),S.context),u&&d.read({defaultVisibility:O.has(d.id)},u.context)}),{origin:ge(a),sublayers:new $({items:L})}}read(r,i){super.read(r,i),this.readSublayers(r,i)}_handleSublayersChange(r,i){i&&(i.forEach(a=>{a.parent=null,a.layer=null}),this.removeHandles("sublayers-owner")),r&&(r.forEach(a=>{a.parent=this,a.layer=this}),this.addHandles([r.on("after-add",({item:a})=>{a.parent=this,a.layer=this}),r.on("after-remove",({item:a})=>{a.parent=null,a.layer=null})],"sublayers-owner"),this.type==="tile"&&this.addHandles(r.on("before-changes",a=>{Ve.error(new g("tilelayer:sublayers-non-modifiable","ISublayer can't be added, moved, or removed from the layer's sublayers",{layer:this})),a.preventDefault()}),"sublayers-owner"))}};return s([n({readOnly:!0})],t.prototype,"allSublayers",void 0),s([n({readOnly:!0,type:U.ofType(B)})],t.prototype,"serviceSublayers",void 0),s([n({value:null,type:$,json:{read:!1,write:{allowNull:!0,ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),s([n({readOnly:!0})],t.prototype,"sublayersSourceJSON",void 0),t=s([q("esri.layers.mixins.SublayersOwner")],t),t};export{Ze as E,B as X,Ye as f};
