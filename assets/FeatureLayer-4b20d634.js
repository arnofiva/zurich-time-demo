import{hn as H,cy as U,av as m,c0 as K,aj as B,gj as Y,ce as X,bm as T,iP as L,ah as s,li as ee,aP as P,gI as te,ai as n,ak as E,aK as q,ao as ie,ix as re,iy as se,f4 as ae,fn as oe,f6 as ne,f5 as le,ap as ue,aq as de,ar as pe,as as ye,fo as ce,co as he,bh as fe,aW as me,aw as ge,j3 as be,j4 as we,gJ as I,lj as ve,lk as _e,dY as Fe,cW as x,iz as R,ll as Se,lm as Te,ir as Ie,dZ as Ee,is as $e,j5 as je,j6 as De,j7 as Oe,ln as Ce,ho as qe,gd as Me,aA as G,iW as Le,db as Pe,j8 as xe,j9 as Re,ja as Ge,bv as Ae,jb as Je,jc as Ne,jd as ke,je as Ve,jf as We,fk as _,ax as Qe,iA as Ze,eS as ze,jg as He,aC as p,lo as Ue,iK as Ke,ci as $,lp as A,f8 as Be,iC as Ye,iD as Xe,iE as j,lq as J,cm as D,jj as et,f9 as tt,lr as it,hr as rt,hs as st,iG as at,hq as ot,iH as nt,fw as lt,jh as ut,ht as dt,aF as pt,ls as yt}from"./index-70a1e848.js";import{D as ct,y as ht}from"./FeatureLayerBase-d5b34521.js";import{i as ft}from"./editsZScale-edfeccc6.js";import{t as N}from"./queryZScale-47976d5a.js";import{d as V}from"./FeatureSet-20ce479f.js";import{i as mt}from"./APIKeyMixin-3e91b31f.js";import{F as gt}from"./EditBusLayer-4de7f58b.js";import{c as bt}from"./OrderedLayer-ea33712e.js";import{p as W}from"./FeatureTemplate-1a55ea44.js";import{n as Q}from"./FeatureType-c8e18d40.js";import{a as wt}from"./serviceCapabilitiesUtils-979570ad.js";import{e as vt}from"./versionUtils-f448b405.js";import{S as F}from"./TopFeaturesQuery-62024588.js";import"./LayerFloorInfo-2c0a736f.js";let _t=0,g=class extends H.LoadableMixin(U(q)){constructor(e){super(e),this._idToClientGraphic=null,this.type="memory"}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this._startWorker(t)),Promise.resolve(this)}destroy(){this._connection?.close(),this._connection=null}get _workerGeometryType(){const e=this.layer?.geometryType;return e?this._geometryTypeRequiresClientGraphicMapping(e)?"polygon":e:null}applyEdits(e){return this.load().then(()=>this._applyEdits(e))}openPorts(){return this.load().then(()=>this._connection.openPorts())}async queryFeatures(e,t={}){await this.load(t);const i=await this._connection.invoke("queryFeatures",e?e.toJSON():null,t);N(e,this.layer.spatialReference,i);const r=V.fromJSON(i);if(!this._requiresClientGraphicMapping())return r;const o=this.layer.objectIdField;for(const l of r.features){const d=l.attributes[o],y=this._idToClientGraphic.get(d);y&&(l.geometry=y.geometry)}return r.geometryType=this.layer.geometryType,r}async queryFeaturesJSON(e,t={}){if(this._requiresClientGraphicMapping())throw new m("query-features-json:unsupported","Cannot query in JSON format for client only geometry types (mesh and extent)");await this.load(t);const i=await this._connection.invoke("queryFeatures",e?e.toJSON():null,t);return N(e,this.layer.spatialReference,i),i}queryFeatureCount(e,t={}){return this.load(t).then(()=>this._connection.invoke("queryFeatureCount",e?e.toJSON():null,t))}queryObjectIds(e,t={}){return this.load(t).then(()=>this._connection.invoke("queryObjectIds",e?e.toJSON():null,t))}queryExtent(e,t={}){return this.load(t).then(()=>this._connection.invoke("queryExtent",e?e.toJSON():null,t)).then(i=>({count:i.count,extent:K.fromJSON(i.extent)}))}querySnapping(e,t={}){return this.load(t).then(()=>this._connection.invoke("querySnapping",e,t))}async _applyEdits(e){if(!this._connection)throw new m("feature-layer-source:edit-failure","Memory source not loaded");const t=this.layer.objectIdField;let i=null;const r=[],o=[];await Promise.all([this._prepareClientMapping(e.addFeatures,null),this._prepareClientMapping(e.updateFeatures,null)]);const l=u=>"objectId"in u&&u.objectId!=null?u.objectId:"attributes"in u&&u.attributes[t]!=null?u.attributes[t]:null;if(e.addFeatures&&(i=this._prepareAddFeatures(e.addFeatures)),e.deleteFeatures)for(const u of e.deleteFeatures){const f=l(u);f!=null&&r.push(f)}const d=e.updateFeatures&&this._idToClientGraphic?new Map:null;if(e.updateFeatures){for(const u of e.updateFeatures)if(o.push(this._serializeFeature(u)),d){const f=l(u);f!=null&&d.set(f,u)}}ft(i?i.features:null,o,this.layer.spatialReference);const{fullExtent:y,featureEditResults:h}=await this._connection.invoke("applyEdits",{adds:i?i.features:[],updates:o,deletes:r});return this.fullExtent=y,i&&i.finish(h.uidToObjectId),this._updateClientGraphicIds(d,h),this._createEditsResult(h)}async _prepareClientMapping(e,t){if(this._layerOrSourceGeometryType!=="mesh"||e==null)return;const i=[];for(const{geometry:r}of e)r==null||r.type!=="mesh"||r.hasExtent||r.loaded||i.push(r.load({signal:t}));i.length&&await Promise.all(i)}_updateClientGraphicIds(e,t){if(this._idToClientGraphic){if(e)for(const i of t.updateResults){if(!i.success)continue;const r=e.get(i.objectId);r!=null&&this._addIdToClientGraphic(r)}for(const i of t.deleteResults)i.success&&this._idToClientGraphic.delete(i.objectId)}}_createEditsResult(e){return{addFeatureResults:e.addResults?e.addResults.map(this._createFeatureEditResult,this):[],updateFeatureResults:e.updateResults?e.updateResults.map(this._createFeatureEditResult,this):[],deleteFeatureResults:e.deleteResults?e.deleteResults.map(this._createFeatureEditResult,this):[],addAttachmentResults:[],updateAttachmentResults:[],deleteAttachmentResults:[]}}_createFeatureEditResult(e){const t=e.success===!0?null:e.error||{code:void 0,description:void 0};return{objectId:e.objectId,globalId:e.globalId,error:t?new m("feature-layer-source:edit-failure",t.description,{code:t.code}):null}}_prepareAddFeatures(e){const t=new Map,i=new Array(e.length);let r=null;for(let l=0;l<e.length;l++){const d=e[l],y=this._serializeFeature(d);r||d.geometry==null||(r=d.geometry.type),i[l]=y,t.set(`${y.uid}`,d)}const o=this;return{features:i,inferredGeometryType:r,finish(l){const d=o.sourceJSON.objectIdField;for(const y in l){const h=l[y],u=t.get(y);u&&(u.attributes||(u.attributes={}),h===-1?delete u.attributes[d]:u.attributes[d]=h,o._addIdToClientGraphic(u))}}}}_addIdToClientGraphic(e){if(!this._idToClientGraphic)return;const t=this.sourceJSON.objectIdField,i=e.attributes?.[t];i!=null&&this._idToClientGraphic.set(i,e)}get _layerOrSourceGeometryType(){return this.layer?.geometryType??this.sourceJSON?.geometryType}_requiresClientGraphicMapping(){return this._geometryTypeRequiresClientGraphicMapping(this._layerOrSourceGeometryType)}_geometryRequiresClientGraphicMapping(e){return this._geometryTypeRequiresClientGraphicMapping(e.type)}_geometryTypeRequiresClientGraphicMapping(e){return e==="mesh"||e==="multipatch"||e==="extent"}_serializeFeature(e){const{attributes:t}=e,i=this._geometryForSerialization(e),r=(_t++).toString();return i?{uid:r,geometry:i.toJSON(),attributes:t}:{uid:r,attributes:t}}_geometryForSerialization(e){const{geometry:t}=e;return t==null?null:this._geometryRequiresClientGraphicMapping(t)?t.extent?B.fromExtent(t.extent):null:t}async _startWorker(e){this._connection=await Y("MemorySourceWorker",{strategy:X("feature-layers-workers")?"dedicated":"local",signal:e,registryTarget:this});const{fields:t,spatialReference:i,objectIdField:r,hasM:o,hasZ:l,timeInfo:d,dateFieldsTimeZone:y}=this.layer,h=this.layer.originOf("spatialReference")==="defaults";await this._prepareClientMapping(this.items,e);const u=this._prepareAddFeatures(this.items);this.addHandles(this.on("before-changes",w=>{T.getLogger(this).error("Source modifications will not propagate after layer has been loaded. Please use .applyEdits() instead"),w.preventDefault()}));const f={features:u.features,fields:t?.map(w=>w.toJSON()),geometryType:L.toJSON(this._workerGeometryType),hasM:this._layerOrSourceGeometryType!=="mesh"&&o,hasZ:this._layerOrSourceGeometryType==="mesh"||l,objectIdField:r,spatialReference:h?null:i&&i.toJSON(),timeInfo:d?.toJSON()??null,dateFieldsTimeZone:y},b=await this._connection.invoke("load",f,{signal:e});for(const w of b.warnings)T.getLogger(this.layer).warn("#load()",`${w.message} (title: '${this.layer.title||"no title"}', id: '${this.layer.id??"no id"}')`,{warning:w});b.featureErrors.length&&T.getLogger(this.layer).warn("#load()",`Encountered ${b.featureErrors.length} validation errors while loading features. (title: '${this.layer.title||"no title"}', id: '${this.layer.id??"no id"}')`,{errors:b.featureErrors});const M=b.layerDefinition;this._geometryTypeRequiresClientGraphicMapping(u.inferredGeometryType)&&(M.geometryType=L.toJSON(u.inferredGeometryType)),this.sourceJSON=M,this._requiresClientGraphicMapping()&&(this._idToClientGraphic=new Map),u.finish(b.assignedObjectIds)}};s([ee({Type:P,ensureType:te(P)})],g.prototype,"itemType",void 0),s([n()],g.prototype,"type",void 0),s([n({constructOnly:!0})],g.prototype,"layer",void 0),s([n({readOnly:!0})],g.prototype,"_workerGeometryType",null),s([n()],g.prototype,"sourceJSON",void 0),g=s([E("esri.layers.graphics.sources.MemorySource")],g);let v=class extends ie{constructor(){super(...arguments),this.updating=!1,this.status="unknown"}};s([n()],v.prototype,"updating",void 0),s([n()],v.prototype,"status",void 0),v=s([E("esri.layers.support.PublishingInfo")],v);const Ft=v,Z="esri.layers.mixins.PublishableLayer",St=Symbol(Z),Tt=e=>{var t;let i=class extends e{constructor(){super(...arguments),this[t]=!0}get publishingInfo(){if(this.destroyed)return null;const r=this._get("publishingInfo");if(r)return r;const o=new Ft;return this._checkPublishingStatus(o),o}_checkPublishingStatus(r){let d=0;const y=async u=>{let f;r.updating=!0;try{f=await this.fetchPublishingStatus()}catch{f="unavailable"}f!=="published"&&f!=="unavailable"||(r.status==="publishing"&&this.refresh(),h.remove()),r.status=f,r.updating=!1,h.removed||(d=setTimeout(y,u,u+125))},h={removed:!1,remove(){this.removed=!0,clearTimeout(d)}};this.when().catch(()=>h.remove()),y(250),this.addHandles(h)}};return t=St,s([n({readOnly:!0,clonable:!1})],i.prototype,"publishingInfo",null),i=s([E(Z)],i),i},c="FeatureLayer",z="esri.layers.FeatureLayer",It=T.getLogger(z);function S(e,t){return new m("layer:unsupported",`Layer (${e.title}, ${e.id}) of type '${e.declaredClass}' ${t}`,{layer:e})}function k(e){return e&&e instanceof q}const O=dt();function C(e,t,i){const r=!!i?.writeLayerSchema;return{enabled:r,ignoreOrigin:r}}let a=class extends ct(re(se(Tt(gt(ae(bt(oe(ne(le(ue(de(pe(ye(ce(mt(he(pt))))))))))))))))){constructor(...e){super(...e),this.charts=null,this.copyright=null,this.displayField=null,this.dynamicDataSource=null,this.fields=null,this.fieldsIndex=null,this.formTemplate=null,this.fullExtent=null,this.geometryType=null,this.hasM=void 0,this.hasZ=void 0,this.infoFor3D=null,this.isTable=!1,this.labelsVisible=!0,this.labelingInfo=null,this.legendEnabled=!0,this.objectIdField=null,this.outFields=null,this.path=null,this.popupEnabled=!0,this.popupTemplate=null,this.resourceInfo=null,this.screenSizePerspectiveEnabled=!0,this.spatialReference=fe.WGS84,this.subtypeCode=null,this.templates=null,this.timeInfo=null,this.title=null,this.sublayerTitleMode="item-title",this.type="feature",this.typeIdField=null,this.types=null,this.visible=!0,this._debouncedSaveOperations=me(async(t,i,r)=>{const{save:o,saveAs:l}=await G(()=>import("./featureLayerUtils-56dc95e1.js"),["./featureLayerUtils-56dc95e1.js","./index-70a1e848.js","./index-fa8fa232.css","./utils-c17e3eca.js","./jsonContext-663a523d.js","./fetchService-6e256c6d.js","./requestPresets-07a176e4.js","./FeatureLayerBase-d5b34521.js","./LayerFloorInfo-2c0a736f.js","./serviceCapabilitiesUtils-979570ad.js","./editsZScale-edfeccc6.js","./queryZScale-47976d5a.js","./FeatureSet-20ce479f.js","./APIKeyMixin-3e91b31f.js","./EditBusLayer-4de7f58b.js","./OrderedLayer-ea33712e.js","./FeatureTemplate-1a55ea44.js","./FeatureType-c8e18d40.js","./versionUtils-f448b405.js","./TopFeaturesQuery-62024588.js"],import.meta.url);switch(t){case _.SAVE:return o(this,i);case _.SAVE_AS:return l(this,r,i)}})}destroy(){this.source?.destroy()}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;if(this.portalItem?.loaded&&this.source)return this.addResolvingPromise(this.createGraphicsSource(t).then(r=>this.initLayerProperties(r))),Promise.resolve(this);const i=this.loadFromPortal({supportedTypes:["Feature Service","Feature Collection","Scene Service"]},e).catch(ge).then(async()=>{if(this.url&&this.layerId==null&&/FeatureServer|MapServer\/*$/i.test(this.url)){const r=await this._fetchFirstValidLayerId(t);r!=null&&(this.layerId=r)}if(!this.url&&!this._hasMemorySource())throw new m("feature-layer:missing-url-or-source","Feature layer must be created with either a url or a source");return this.initLayerProperties(await this.createGraphicsSource(t))}).then(()=>be(this,"load",e));return this.addResolvingPromise(i),Promise.resolve(this)}readCapabilities(e,t){return t=t.layerDefinition||t,wt(t,this.url)}get createQueryVersion(){return this.commitProperty("definitionExpression"),this.commitProperty("dynamicDataSource"),this.commitProperty("timeExtent"),this.commitProperty("timeOffset"),this.commitProperty("geometryType"),this.commitProperty("gdbVersion"),this.commitProperty("historicMoment"),this.commitProperty("returnZ"),this.commitProperty("capabilities"),this.commitProperty("returnM"),(this._get("createQueryVersion")??0)+1}get editingEnabled(){return!(this.loaded&&!this.capabilities?.operations.supportsEditing)&&(this._isOverridden("editingEnabled")?this._get("editingEnabled"):this._hasMemorySource()||this.userHasEditingPrivileges)}set editingEnabled(e){this._overrideIfSome("editingEnabled",e)}readEditingEnabled(e,t){return this._readEditingEnabled(t,!1)}readEditingEnabledFromWebMap(e,t,i){return this._readEditingEnabled(t,!0,i)}writeEditingEnabled(e,t){this._writeEditingEnabled(e,t,!1)}writeEditingEnabledToWebMap(e,t,i,r){this._writeEditingEnabled(e,t,!0,r)}get effectiveEditingEnabled(){return we(this)}readIsTable(e,t){return(t=t?.layerDefinition??t).type==="Table"||!t.geometryType}writeIsTable(e,t,i,r){r?.writeLayerSchema&&I(i,e?"Table":"Feature Layer",t)}readGlobalIdField(e,t){return ve(t.layerDefinition||t)}readObjectIdField(e,t){return _e(t.layerDefinition||t)}get parsedUrl(){const e=Fe(this.url);return e!=null&&(this.dynamicDataSource!=null?e.path=x(e.path,"dynamicLayer"):this.layerId!=null&&(e.path=x(e.path,this.layerId.toString()))),e}get defaultPopupTemplate(){return this.createPopupTemplate()}set renderer(e){R(e,this.fieldsIndex),this._set("renderer",e)}readRenderer(e,t,i){t=t.layerDefinition||t;const r=t.drawingInfo?.renderer;if(r){const o=Se(r,t,i)??void 0;return o||It.error("Failed to create renderer",{rendererDefinition:t.drawingInfo.renderer,layer:this,context:i}),o}return Te(t,i)}set source(e){const t=this._get("source");t!==e&&(k(t)&&this._resetMemorySource(t),k(e)&&this._initMemorySource(e),this._set("source",e))}castSource(e){return e?Array.isArray(e)||e instanceof q?new g({layer:this,items:e}):e:null}readSource(e,t){const i=V.fromJSON(t.featureSet);return new g({layer:this,items:i?.features??[]})}readTemplates(e,t){const i=t.editFieldsInfo,r=i?.creatorField,o=i?.editorField;return e=e?.map(l=>W.fromJSON(l)),this._fixTemplates(e,r),this._fixTemplates(e,o),e}readTitle(e,t){const i=t.layerDefinition?.name??t.name,r=t.title||t.layerDefinition?.title;if(i){const o=this.portalItem?.title;if(this.sublayerTitleMode==="item-title")return this.url?Ie(this.url,i):i;let l=i;if(!l&&this.url){const d=Ee(this.url);d!=null&&(l=d.title)}return l?(this.sublayerTitleMode==="item-title-and-service-name"&&o&&o!==l&&(l=o+" - "+l),$e(l)):void 0}if(this.sublayerTitleMode==="item-title"&&r)return r}readTitleFromWebMap(e,t){return t.title||t.layerDefinition?.name}readTypeIdField(e,t){let i=(t=t.layerDefinition||t).typeIdField;if(i&&t.fields){i=i.toLowerCase();const r=t.fields.find(o=>o.name.toLowerCase()===i);r&&(i=r.name)}return i}readTypes(e,t){e=(t=t.layerDefinition||t).types;const i=t.editFieldsInfo,r=i?.creatorField,o=i?.editorField;return e?.map(l=>(l=Q.fromJSON(l),this._fixTemplates(l.templates,r),this._fixTemplates(l.templates,o),l))}readVisible(e,t){return t.layerDefinition?.defaultVisibility!=null?!!t.layerDefinition.defaultVisibility:t.visibility!=null?!!t.visibility:void 0}async addAttachment(e,t){return je(this,e,t,c)}async updateAttachment(e,t,i){return De(this,e,t,i,c)}async applyEdits(e,t){return Oe(this,e,t)}async uploadAssets(e,t){return Ce(this,e,t)}on(e,t){return super.on(e,t)}createPopupTemplate(e){return qe(this,e)}async createGraphicsSource(e){if(this._hasMemorySource()&&this.source)return this.source.load({signal:e});const{default:t}=await Me(G(()=>import("./FeatureLayerSource-5f557135.js"),["./FeatureLayerSource-5f557135.js","./index-70a1e848.js","./index-fa8fa232.css","./External-5bb4f949.js","./editingSupport-0e0a87c3.js","./EditBusLayer-4de7f58b.js","./clientSideDefaults-9edee6f4.js","./QueryEngineCapabilities-85c4f1d0.js","./QueryTask-e0bc6c36.js","./executeForIds-d30371a5.js","./query-329b2ac1.js","./pbfQueryUtils-2cf66e2d.js","./pbf-b60d46d3.js","./queryZScale-47976d5a.js","./executeQueryJSON-c894fe77.js","./FeatureSet-20ce479f.js","./executeQueryPBF-1084faae.js","./editsZScale-edfeccc6.js"],import.meta.url),e);return new t({layer:this}).load({signal:e})}createQuery(){const e=Le(this);e.dynamicDataSource=this.dynamicDataSource;const t=this.subtypeCode!=null?`${this.subtypeField} = ${this.subtypeCode}`:null,i=Pe(this.definitionExpression,t);return e.where=i||"1=1",e}async deleteAttachments(e,t){return xe(this,e,t,c)}async fetchRecomputedExtents(e){return Re(this,e,c)}getFeatureType(e){const{typeIdField:t,types:i}=this;if(!t||!e)return null;const r=e.attributes?e.attributes[t]:void 0;if(r==null)return null;let o=null;return i?.some(l=>{const{id:d}=l;return d!=null&&(d.toString()===r.toString()&&(o=l),!!o)}),o}getFieldDomain(e,t){const i=t?.feature,r=this.getFeatureType(i);if(r){const o=r.domains&&r.domains[e];if(o&&o.type!=="inherited")return o}return this._getLayerDomain(e)}getField(e){return this.fieldsIndex.get(e)}async queryAttachments(e,t){return Ge(this,e,t,c)}async queryFeatures(e,t){const i=await this.load(),r=await i.source.queryFeatures(Ae.from(e)??i.createQuery(),t);if(r?.features)for(const o of r.features)o.layer=o.sourceLayer=i;return r}async queryObjectIds(e,t){return Je(this,e,t,c)}async queryFeatureCount(e,t){return Ne(this,e,t,c)}async queryExtent(e,t){return ke(this,e,t,c)}async queryRelatedFeatures(e,t){return Ve(this,e,t,c)}async queryRelatedFeaturesCount(e,t){return We(this,e,t,c)}async queryTopFeatures(e,t){const{source:i,capabilities:r}=await this.load();if(!i.queryTopFeatures||!r?.query?.supportsTopFeaturesQuery)throw new m(c,"Layer source does not support queryTopFeatures capability");const o=await i.queryTopFeatures(F.from(e),t);if(o?.features)for(const l of o.features)l.layer=l.sourceLayer=this;return o}async queryTopObjectIds(e,t){const{source:i,capabilities:r}=await this.load();if(!i.queryTopObjectIds||!r?.query.supportsTopFeaturesQuery)throw new m(c,"Layer source does not support queryTopObjectIds capability");return i.queryTopObjectIds(F.from(e),t)}async queryTopFeaturesExtent(e,t){const{source:i,capabilities:r}=await this.load();if(!i.queryTopExtents||!r?.query?.supportsTopFeaturesQuery)throw new m(c,"Layer source does not support queryTopExtents capability");return i.queryTopExtents(F.from(e),t)}async queryTopFeatureCount(e,t){const{source:i,capabilities:r}=await this.load();if(!i.queryTopCount||!r?.query?.supportsTopFeaturesQuery)throw new m(c,"Layer source does not support queryFeatureCount capability");return i.queryTopCount(F.from(e),t)}read(e,t){const i=e.featureCollection;if(i){this.resourceInfo=e;const r=i.layers;r&&r.length===1&&(super.read(r[0],t),i.showLegend!=null&&super.read({showLegend:i.showLegend},t))}super.read(e,t),t&&t.origin==="service"&&(this.revert(["objectIdField","fields","timeInfo","dateFieldsTimeZone"],"service"),this.spatialReference||this.revert(["spatialReference"],"service"))}write(e,t){t={...t,origin:t?.origin??void 0,writeLayerSchema:t?.writeLayerSchema??this._hasMemorySource()};const{origin:i,layerContainerType:r,messages:o}=t;if(this.dynamicDataSource)return o?.push(S(this,"using a dynamic data source cannot be written to web scenes, web maps and feature service items")),null;if(this.isTable){if((i==="web-map"||i==="web-scene")&&r!=="tables")return o?.push(S(this,`a table source can only be written to tables, not ${r}`)),null;if(this._hasMemorySource())return o?.push(S(this,"using an in-memory table source cannot be written to web scenes and web maps")),null}else if(this.loaded&&(i==="web-map"||i==="web-scene")&&r==="tables")return o?.push(S(this,"using a non-table source cannot be written to tables in web maps or web scenes")),null;return super.write(e,t)}clone(){if(this._hasMemorySource())throw new m(c,`FeatureLayer (title: ${this.title}, id: ${this.id}) created using in-memory source cannot be cloned`);return super.clone()}serviceSupportsSpatialReference(e){return!!this.loaded&&(this.source?.type==="memory"||vt(this,e))}async save(e){return this._debouncedSaveOperations(_.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(_.SAVE_AS,t,e)}_readEditingEnabled(e,t,i){let r=e.layerDefinition?.capabilities;return r?this._hasEditingCapability(r):(r=e.capabilities,t&&i?.origin==="web-map"&&!this._hasMemorySource()&&r?this._hasEditingCapability(r):void 0)}_hasEditingCapability(e){return e.toLowerCase().split(",").map(t=>t.trim()).includes("editing")}_writeEditingEnabled(e,t,i,r){if(!e){const o=this.capabilities?.operations?.supportsSync?"Query,Sync":"Query";I("layerDefinition.capabilities",o,t),i&&!r?.writeLayerSchema&&(t.capabilities=o)}}_getLayerDomain(e){const t=this.fieldsIndex.get(e);return t?t.domain:null}_fetchFirstValidLayerId(e){return Qe(this.url,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(t=>{const i=t.data;if(i)return this.findFirstValidLayerId(i)})}async initLayerProperties(e){return this._set("source",e),e.sourceJSON&&(this.sourceJSON=e.sourceJSON,this.read(e.sourceJSON,{origin:"service",portalItem:this.portalItem,portal:this.portalItem?.portal,url:this.parsedUrl})),this._verifySource(),this._verifyFields(),R(this.renderer,this.fieldsIndex),Ze(this.timeInfo,this.fieldsIndex),ze(this,{origin:"service"})}async hasDataChanged(){return He(this)}async fetchPublishingStatus(){const e=this.source;return e?.fetchPublishingStatus?e.fetchPublishingStatus():"unavailable"}_verifyFields(){const e=this.parsedUrl?.path??"undefined";this.objectIdField||console.log("FeatureLayer: 'objectIdField' property is not defined (url: "+e+")"),this.isTable||this._hasMemorySource()||e.search(/\/FeatureServer\//i)!==-1||this.fields?.some(t=>t.type==="geometry")||console.log("FeatureLayer: unable to find field of type 'geometry' in the layer 'fields' list. If you are using a map service layer, features will not have geometry (url: "+e+")")}_fixTemplates(e,t){e&&e.forEach(i=>{const r=i.prototype?.attributes;r&&t&&delete r[t]})}_verifySource(){if(this._hasMemorySource()){if(this.url)throw new m("feature-layer:mixed-source-and-url","FeatureLayer cannot be created with both an in-memory source and a url")}else if(!this.url)throw new m("feature-layer:source-or-url-required","FeatureLayer requires either a url, a valid portal item or a source")}_initMemorySource(e){e.forEach(t=>{t.layer=this,t.sourceLayer=this}),this.addHandles([e.on("after-add",t=>{t.item.layer=this,t.item.sourceLayer=this}),e.on("after-remove",t=>{t.item.layer=null,t.item.sourceLayer=null})],"fl-source")}_resetMemorySource(e){e.forEach(t=>{t.layer=null,t.sourceLayer=null}),this.removeHandles("fl-source")}_hasMemorySource(){return!(this.url||!this.source)}findFirstValidLayerId(e){return Array.isArray(e.layers)&&e.layers.length>0?e.layers[0].id:Array.isArray(e.tables)&&e.tables.length>0?e.tables[0].id:void 0}};s([p("service","capabilities")],a.prototype,"readCapabilities",null),s([n({json:{origins:{"web-scene":{write:!1}},write:!0}})],a.prototype,"charts",void 0),s([n({readOnly:!0})],a.prototype,"createQueryVersion",null),s([n({json:{read:{source:"layerDefinition.copyrightText"}}})],a.prototype,"copyright",void 0),s([n({json:{read:{source:"layerDefinition.displayField"}}})],a.prototype,"displayField",void 0),s([n({types:Ue,readOnly:!0})],a.prototype,"defaultSymbol",void 0),s([n({type:Ke})],a.prototype,"dynamicDataSource",void 0),s([n({type:Boolean})],a.prototype,"editingEnabled",null),s([p(["portal-item","web-scene"],"editingEnabled",["layerDefinition.capabilities"])],a.prototype,"readEditingEnabled",null),s([p("web-map","editingEnabled",["capabilities","layerDefinition.capabilities"])],a.prototype,"readEditingEnabledFromWebMap",null),s([$(["portal-item","web-scene"],"editingEnabled",{"layerDefinition.capabilities":{type:String}})],a.prototype,"writeEditingEnabled",null),s([$("web-map","editingEnabled",{capabilities:{type:String},"layerDefinition.capabilities":{type:String}})],a.prototype,"writeEditingEnabledToWebMap",null),s([n({readOnly:!0})],a.prototype,"effectiveEditingEnabled",null),s([n({...O.fields,json:{read:{source:"layerDefinition.fields"},origins:{service:{name:"fields"},"web-map":{write:{target:"layerDefinition.fields",overridePolicy:C}}}}})],a.prototype,"fields",void 0),s([n(O.fieldsIndex)],a.prototype,"fieldsIndex",void 0),s([n({type:ht,json:{name:"formInfo",write:!0,origins:{"web-scene":{read:!1,write:!1}}}})],a.prototype,"formTemplate",void 0),s([n({json:{read:{source:"layerDefinition.extent"}}})],a.prototype,"fullExtent",void 0),s([n({json:{origins:{"web-map":{write:{target:"layerDefinition.geometryType",overridePolicy:C,writer(e,t,i){const r=e?A.toJSON(e):null;r&&I(i,r,t)}}}},read:{source:"layerDefinition.geometryType",reader:A.read}}})],a.prototype,"geometryType",void 0),s([n({json:{read:{source:"layerDefinition.hasM"}}})],a.prototype,"hasM",void 0),s([n({json:{read:{source:"layerDefinition.hasZ"}}})],a.prototype,"hasZ",void 0),s([n(Be)],a.prototype,"id",void 0),s([n({readOnly:!0,json:{origins:{service:{read:!0}},read:!1}})],a.prototype,"infoFor3D",void 0),s([n({json:{origins:{"web-map":{write:{target:"layerDefinition.type"}}}}})],a.prototype,"isTable",void 0),s([p("service","isTable",["type","geometryType"]),p("isTable",["layerDefinition.type","layerDefinition.geometryType"])],a.prototype,"readIsTable",null),s([$("web-map","isTable")],a.prototype,"writeIsTable",null),s([n(Ye)],a.prototype,"labelsVisible",void 0),s([n({type:[Xe],json:{origins:{service:{name:"drawingInfo.labelingInfo",read:j,write:!1},"web-scene":{name:"layerDefinition.drawingInfo.labelingInfo",read:j,write:{enabled:!0,layerContainerTypes:J}}},name:"layerDefinition.drawingInfo.labelingInfo",read:j,write:!0}})],a.prototype,"labelingInfo",void 0),s([n((()=>{const e=D(et);return e.json.origins["portal-item"]={write:{target:"layerDefinition.drawingInfo.transparency",writer(t,i,r){I(r,yt(t),i)}}},e})())],a.prototype,"opacity",void 0),s([n(tt)],a.prototype,"legendEnabled",void 0),s([n({type:["show","hide"],json:(()=>{const e=D(it.json);return e.origins["portal-item"]={read:!1,write:!1},e})()})],a.prototype,"listMode",void 0),s([p("globalIdField",["layerDefinition.globalIdField","layerDefinition.fields"])],a.prototype,"readGlobalIdField",null),s([n({json:{origins:{"web-map":{write:{target:"layerDefinition.objectIdField",overridePolicy:C}}}}})],a.prototype,"objectIdField",void 0),s([p("objectIdField",["layerDefinition.objectIdField","layerDefinition.fields"])],a.prototype,"readObjectIdField",null),s([n({value:"ArcGISFeatureLayer",type:["ArcGISFeatureLayer"]})],a.prototype,"operationalLayerType",void 0),s([n(O.outFields)],a.prototype,"outFields",void 0),s([n({readOnly:!0})],a.prototype,"parsedUrl",null),s([n({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],a.prototype,"path",void 0),s([n(rt)],a.prototype,"popupEnabled",void 0),s([n({type:st,json:{name:"popupInfo",write:!0}})],a.prototype,"popupTemplate",void 0),s([n({readOnly:!0})],a.prototype,"defaultPopupTemplate",null),s([n({types:at,json:{origins:{service:{write:{target:"drawingInfo.renderer",enabled:!1}},"web-scene":{types:ot,name:"layerDefinition.drawingInfo.renderer",write:{layerContainerTypes:J,overridePolicy:(e,t,i)=>({ignoreOrigin:i?.writeLayerSchema})}}},write:{target:"layerDefinition.drawingInfo.renderer",overridePolicy:(e,t,i)=>({ignoreOrigin:i?.writeLayerSchema})}}})],a.prototype,"renderer",null),s([p("service","renderer",["drawingInfo.renderer","defaultSymbol"]),p("renderer",["layerDefinition.drawingInfo.renderer","layerDefinition.defaultSymbol"])],a.prototype,"readRenderer",null),s([n()],a.prototype,"resourceInfo",void 0),s([n((()=>{const e=D(nt);return e.json.origins["portal-item"]={read:!1,write:!1},e})())],a.prototype,"screenSizePerspectiveEnabled",void 0),s([n({clonable:!1})],a.prototype,"source",null),s([lt("source")],a.prototype,"castSource",null),s([p("portal-item","source",["featureSet"]),p("web-map","source",["featureSet"])],a.prototype,"readSource",null),s([n({json:{read:{source:"layerDefinition.extent.spatialReference"}}})],a.prototype,"spatialReference",void 0),s([n({type:Number})],a.prototype,"subtypeCode",void 0),s([n({type:[W]})],a.prototype,"templates",void 0),s([p("templates",["editFieldsInfo","creatorField","editorField","templates"])],a.prototype,"readTemplates",null),s([n({type:ut})],a.prototype,"timeInfo",void 0),s([n()],a.prototype,"title",void 0),s([p("service","title",["name"]),p("portal-item","title",["layerDefinition.title","layerDefinition.name","title"])],a.prototype,"readTitle",null),s([p("web-map","title",["layerDefinition.name","title"])],a.prototype,"readTitleFromWebMap",null),s([n({type:String})],a.prototype,"sublayerTitleMode",void 0),s([n({json:{read:!1}})],a.prototype,"type",void 0),s([n({type:String})],a.prototype,"typeIdField",void 0),s([p("service","typeIdField"),p("typeIdField",["layerDefinition.typeIdField"])],a.prototype,"readTypeIdField",null),s([n({type:[Q]})],a.prototype,"types",void 0),s([p("service","types",["types"]),p("types",["layerDefinition.types"])],a.prototype,"readTypes",null),s([n({type:Boolean,json:{origins:{"portal-item":{write:{target:"layerDefinition.defaultVisibility"}}}}})],a.prototype,"visible",void 0),s([p("portal-item","visible",["visibility","layerDefinition.defaultVisibility"])],a.prototype,"readVisible",null),a=s([E(z)],a);const Jt=a;export{Jt as default};
