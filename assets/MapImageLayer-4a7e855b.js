import{f4 as $,fn as w,f6 as I,ap as T,aq as E,ar as O,as as M,f5 as F,fo as P,aw as R,cP as v,cB as f,fp as j,fq as L,ax as g,c0 as q,fr as J,fj as N,av as b,bq as U,ah as a,ai as s,fs as x,aC as A,ci as _,aE as k,ak as V,aF as z,ft as B}from"./index-35e234f2.js";import{i as C}from"./APIKeyMixin-06dcd75c.js";import{E as Z,f as D,X as G}from"./SublayersOwner-bb15b743.js";import{m as H}from"./ExportImageParameters-93b89e4c.js";import{t as K}from"./imageBitmapUtils-e2807ce7.js";import{e as S}from"./sublayerUtils-c6f9d89f.js";import{e as W}from"./versionUtils-50becd2c.js";import"./QueryTask-44320cc4.js";import"./executeForIds-5b595fba.js";import"./query-7fb34953.js";import"./pbfQueryUtils-06ca1a31.js";import"./pbf-20893484.js";import"./queryZScale-4260d97b.js";import"./executeQueryJSON-d5f14792.js";import"./FeatureSet-890fea54.js";import"./executeQueryPBF-fdbd0a42.js";import"./FeatureType-868607ca.js";import"./FeatureTemplate-d9befeeb.js";import"./LayerFloorInfo-ecc28037.js";import"./serviceCapabilitiesUtils-4d535ec8.js";import"./floorFilterUtils-73949d2d.js";let t=class extends $(w(I(Z(D(T(E(O(M(F(C(P(z)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(R).then(()=>this._fetchService(r))),Promise.resolve(this)}readImageFormat(e,r){const l=r.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,l,i){if(!this.loaded||!e)return;const p=e.slice().reverse().flatten(({sublayers:n})=>n&&n.toArray().reverse()).toArray();let o=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap?.supportsDynamicLayers){const n=v(i.origin);if(n===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;o=S(p,c,f.SERVICE)}else if(n>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");o=S(p,c.sublayers,v(c.origin))}}const m=[],h={writeSublayerStructure:o,...i};let d=o;p.forEach(n=>{const c=n.write({},h);m.push(c),d=d||n.originOf("visible")==="user"}),m.some(n=>Object.keys(n).length>1)&&(r.layers=m),d&&(r.visibleLayers=p.filter(n=>n.visible).map(n=>n.id))}createExportImageParameters(e,r,l,i){const p=i?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const o=new H({layer:this,floors:i?.floors,scale:j({extent:e,width:r})*p}),m=o.toJSON();o.destroy();const h=!i?.rotation||this.version<10.3?{}:{rotation:-i.rotation},d=e?.spatialReference,n=L(d);m.dpi*=p;const c={};if(i?.timeExtent){const{start:y,end:u}=i.timeExtent.toJSON();c.time=y&&u&&y===u?""+y:`${y??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:n,imageSR:n,size:r+","+l,...m,...h,...c}}async fetchImage(e,r,l,i){const{data:p}=await this._fetchImage("image",e,r,l,i);return p}async fetchImageBitmap(e,r,l,i){const{data:p,url:o}=await this._fetchImage("blob",e,r,l,i);return K(p,o,i?.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await g(this.url,r),{extent:i,fullExtent:p,timeExtent:o}=l,m=i||p;return{fullExtent:m&&q.fromJSON(m),timeExtent:o&&J.fromJSON({start:o[0],end:o[1]})}}loadAll(){return N(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return W(this,e)}async _fetchImage(e,r,l,i,p){const o={responseType:e,signal:p?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,l,i,p),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(o.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:h}=await g(m,o);return{data:h,url:m}}catch(h){throw U(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:l}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}};a([s(x("dateFieldsTimeReference"))],t.prototype,"dateFieldsTimeZone",void 0),a([s({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),a([s()],t.prototype,"dpi",void 0),a([s()],t.prototype,"gdbVersion",void 0),a([s()],t.prototype,"imageFormat",void 0),a([A("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),a([s({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),a([s({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),a([s()],t.prototype,"imageTransparency",void 0),a([s({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),a([s({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),a([s({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),a([s({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),a([s(x("preferredTimeReference"))],t.prototype,"preferredTimeZone",void 0),a([s()],t.prototype,"sourceJSON",void 0),a([s({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),a([_("sublayers",{layers:{type:[G]},visibleLayers:{type:[B]}})],t.prototype,"writeSublayers",null),a([s({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),a([s({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),a([s(k)],t.prototype,"url",void 0),t=a([V("esri.layers.MapImageLayer")],t);const ve=t;export{ve as default};
