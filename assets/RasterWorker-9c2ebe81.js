import{ch as a,ce as l,eZ as c}from"./index-8b5e7d9b.js";import{u as i,f as m,m as f,j as u,L as p,h as S,W as d,U as x,R as h,I as y,a as O,s as N}from"./dataUtils-bacb2c6b.js";import{R as J,i as P}from"./utils-af2c9311.js";import{M as b,T as g,e as B}from"./rasterProjectionHelper-3356de65.js";import"./colorRamps-cf6fa9ce.js";class R{convertVectorFieldData(e){const t=i.fromJSON(e.pixelBlock),s=m(t,e.type);return Promise.resolve(s!=null?s.toJSON():null)}computeStatisticsHistograms(e){const t=i.fromJSON(e.pixelBlock),s=f(t);return Promise.resolve(s)}async decode(e){const t=await u(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=i.fromJSON(e.pixelBlock),e.extent=e.extent?a.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(t!=null?t.toJSON():null)}async updateSymbolizer(e){this.symbolizer=p.fromJSON(e.symbolizerJSON),e.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=J(e.rasterFunctionJSON)}async process(e){const t=this.rasterFunction.process({extent:a.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map(s=>s!=null?i.fromJSON(s):null),primaryPixelSizes:e.primaryPixelSizes?.map(s=>s!=null?l.fromJSON(s):null),primaryRasterIds:e.primaryRasterIds});return t!=null?t.toJSON():null}stretch(e){const t=this.symbolizer.simpleStretch(i.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(t?.toJSON())}estimateStatisticsHistograms(e){const t=S(i.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=d(i.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((s,r)=>{t.set(r,s?.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(n=>n?new i(n):null),s=x(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let r,o=s;return e.coefs&&(o=h(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(r=y(e.destDimension,e.gcsGrid),o=O(o,e.isUV?"vector-uv":"vector-magdir",r)),{pixelBlock:o?.toJSON(),localNorthDirections:r}}async createFlowMesh(e,t){const s={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:r,indexData:o}=await N(e.meshType,e.simulationSettings,s,t.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:o.buffer},transferList:[r.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const t=a.fromJSON(e.projectedExtent),s=a.fromJSON(e.srcBufferExtent);let r=null;e.datumTransformationSteps&&(r=new c({steps:e.datumTransformationSteps})),(e.includeGCSGrid||b(t.spatialReference,s.spatialReference,r))&&await g();const o=e.rasterTransform?P(e.rasterTransform):null;return B({...e,projectedExtent:t,srcBufferExtent:s,datumTransformation:r,rasterTransform:o})}}export{R as default};
