import{ap as $,fb as w,at as I,dw as b,di as f,fm as T,fn as E,au as g,ch as O,d9 as M,fj as R,as as v,bl as j,ah as i,ai as a,fo as x,az as F,cm as L,ak as P,fp as J,aB as N}from"./index-8b5e7d9b.js";import{i as U}from"./APIKeyMixin-9d7343aa.js";import{E as q,f as A,X as _}from"./SublayersOwner-02b508c1.js";import{l as k}from"./ArcGISService-1771a240.js";import{a as z}from"./BlendLayer-dce91235.js";import{o as V}from"./CustomParametersMixin-45f14a7d.js";import{u as B}from"./OperationalLayer-5c10068f.js";import{j as Z}from"./PortalLayer-c3739096.js";import{t as C}from"./ScaleRangeLayer-5b526f5a.js";import{a as D}from"./TemporalLayer-683091de.js";import{d as G}from"./commonProperties-60f31277.js";import{m as H}from"./ExportImageParameters-9e86bb51.js";import{t as K}from"./imageBitmapUtils-5cb2a101.js";import{e as S}from"./sublayerUtils-109579ed.js";import{e as W}from"./versionUtils-e8eeb271.js";import"./UniqueValueRenderer-176db886.js";import"./ColorStop-ac9a118d.js";import"./diffUtils-3ed1f592.js";import"./colorRamps-cf6fa9ce.js";import"./jsonUtils-3d6448c4.js";import"./DictionaryLoader-1a1ab2cc.js";import"./FieldsIndex-85e142d0.js";import"./heatmapUtils-3c0e0ece.js";import"./QueryTask-39d65650.js";import"./Query-630c5d65.js";import"./executeForIds-a0fa7e82.js";import"./query-ae6e69b4.js";import"./pbfQueryUtils-0854066b.js";import"./pbf-97a34880.js";import"./queryZScale-9dee68ff.js";import"./executeQueryJSON-d0cd1585.js";import"./FeatureSet-05a1ff98.js";import"./executeQueryPBF-6bc02793.js";import"./FeatureType-347e5e8f.js";import"./FeatureTemplate-0e5c0008.js";import"./LabelClass-06cdad9c.js";import"./defaults-4b2d7493.js";import"./defaultsJSON-59981e75.js";import"./labelingInfo-4784a348.js";import"./LayerFloorInfo-5c97dc41.js";import"./serviceCapabilitiesUtils-1513785a.js";import"./AttachmentQuery-ac66f9a7.js";import"./popupUtils-6f3d55df.js";import"./jsonUtils-16d33138.js";import"./ElevationInfo-36952bdf.js";import"./floorFilterUtils-73949d2d.js";let t=class extends z(D(C(q(A(k(B(Z($(w(U(V(N)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(I).then(()=>this._fetchService(r))),Promise.resolve(this)}readImageFormat(e,r){const m=r.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,m,o){if(!this.loaded||!e)return;const n=e.slice().reverse().flatten(({sublayers:p})=>p&&p.toArray().reverse()).toArray();let s=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap?.supportsDynamicLayers){const p=b(o.origin);if(p===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;s=S(n,c,f.SERVICE)}else if(p>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");s=S(n,c.sublayers,b(c.origin))}}const l=[],d={writeSublayerStructure:s,...o};let h=s;n.forEach(p=>{const c=p.write({},d);l.push(c),h=h||p.originOf("visible")==="user"}),l.some(p=>Object.keys(p).length>1)&&(r.layers=l),h&&(r.visibleLayers=n.filter(p=>p.visible).map(p=>p.id))}createExportImageParameters(e,r,m,o){const n=o?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const s=new H({layer:this,floors:o?.floors,scale:T({extent:e,width:r})*n}),l=s.toJSON();s.destroy();const d=!o?.rotation||this.version<10.3?{}:{rotation:-o.rotation},h=e?.spatialReference,p=E(h);l.dpi*=n;const c={};if(o?.timeExtent){const{start:u,end:y}=o.timeExtent.toJSON();c.time=u&&y&&u===y?""+u:`${u??"null"},${y??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:p,imageSR:p,size:r+","+m,...l,...d,...c}}async fetchImage(e,r,m,o){const{data:n}=await this._fetchImage("image",e,r,m,o);return n}async fetchImageBitmap(e,r,m,o){const{data:n,url:s}=await this._fetchImage("blob",e,r,m,o);return K(n,s,o?.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await g(this.url,r),{extent:o,fullExtent:n,timeExtent:s}=m,l=o||n;return{fullExtent:l&&O.fromJSON(l),timeExtent:s&&M.fromJSON({start:s[0],end:s[1]})}}loadAll(){return R(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return W(this,e)}async _fetchImage(e,r,m,o,n){const s={responseType:e,signal:n?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,m,o,n),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(s.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:s.query});try{const{data:d}=await g(l,s);return{data:d,url:l}}catch(d){throw j(d)?d:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:d})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:m}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}};i([a(x("dateFieldsTimeReference"))],t.prototype,"dateFieldsTimeZone",void 0),i([a({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),i([a()],t.prototype,"dpi",void 0),i([a()],t.prototype,"gdbVersion",void 0),i([a()],t.prototype,"imageFormat",void 0),i([F("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),i([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),i([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),i([a()],t.prototype,"imageTransparency",void 0),i([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),i([a({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),i([a({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),i([a({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),i([a(x("preferredTimeReference"))],t.prototype,"preferredTimeZone",void 0),i([a()],t.prototype,"sourceJSON",void 0),i([a({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),i([L("sublayers",{layers:{type:[_]},visibleLayers:{type:[J]}})],t.prototype,"writeSublayers",null),i([a({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),i([a({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),i([a(G)],t.prototype,"url",void 0),t=i([P("esri.layers.MapImageLayer")],t);const Be=t;export{Be as default};
