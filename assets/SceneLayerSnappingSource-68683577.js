import{ah as i,ai as o,ak as g,ao as _,cI as m,jt as b,bn as v,af as k,lb as C,aT as H,lc as L,b0 as w,aU as $,aB as E,bS as I}from"./index-5b8adf8e.js";import{a as O,i as V}from"./DimensionAnalysisView3D-d8cd8a2f.js";import{r as R}from"./VertexSnappingCandidate-2c08b7a9.js";import"./LineVisualElement-bd4ef328.js";import"./LengthDimension-a90dda75.js";import"./Segment-976668e0.js";import"./unitFormatUtils-afa307b0.js";import"./elevationInfoUtils-cc8c21bf.js";import"./analysisViewUtils-b7d42819.js";import"./Factory-76945da0.js";import"./ImageMaterial-5afeb352.js";import"./vec4f32-0d1b2306.js";import"./RightAngleQuadVisualElement-bce2b180.js";import"./PointVisualElement-1edae5dd.js";import"./EditGeometryOperations-5536255b.js";import"./floorFilterUtils-73949d2d.js";import"./dehydratedFeatureComparison-50b8e38c.js";let d=class extends _{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new x(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const s=e.coordinateHelper,{point:u}=e,n=j;this.renderCoordsHelper.toRenderCoords(u,s.spatialReference,n);const p=e.distance,c=typeof p=="number"?p:p.distance,h=await this._workerHandle.invoke({bounds:m(n[0],n[1],n[2],c),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return h.candidates.sort((y,f)=>y.distance-f.distance),h.candidates.map(y=>this._convertCandidate(s,y))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new O({objectId:t.objectId,targetPoint:this._convertRenderCoordinate(e,t.target),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new R({objectId:t.objectId,targetPoint:this._convertRenderCoordinate(e,t.target),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const s=v();return this.renderCoordsHelper.fromRenderCoords(t,s,e),V(s)}async _fetchAllEdgeLocations(e,t){const s=[],u=[];for(const{id:n,uid:p}of e.components)this._ids.has(n)&&s.push((async()=>{const c=await this.fetchEdgeLocations(n,t.signal),h=c.locations.buffer;return u.push(h),{id:n,uid:p,objectIds:c.objectIds,locations:h,origin:c.origin,type:c.type}})());return{result:{components:(await Promise.all(s)).filter(({id:n})=>this._ids.has(n))},transferList:u}}};i([o({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),i([o({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),i([o({constructOnly:!0})],d.prototype,"schedule",void 0),i([o({readOnly:!0})],d.prototype,"availability",void 0),d=i([g("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],d);class x extends b{constructor(e,t){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},e,{strategy:"dedicated",client:t})}}const j=v();let a=class extends _{get updating(){return this._updatingHandles.updating}constructor(r){super(r),this.availability=1,this._updatingHandles=new k,this._abortController=new AbortController}destroy(){this._tracker=C(this._tracker),this._abortController=H(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:r}=this,e=r.resourceController;this._edgeWorker=new L(S(e)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:S(e),fetchEdgeLocations:async(t,s)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(t,this._edgeWorker,s)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([w(this._workerHandle),w(this._edgeWorker)])}async fetchCandidates(r,e){return this._workerHandle.fetchCandidates(r,e)}refresh(){}async _setupLayerView(){if(this.destroyed)return;const r=this._abortController?.signal,e=await this.getLayerView();e==null||$(r)||(this._tracker=e.trackSnappingSources({add:(t,s)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:t,bounds:s},r))},remove:t=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:t},r))}}))}};function S(r){return e=>r.immediate.schedule(e)}i([o({constructOnly:!0})],a.prototype,"getLayerView",void 0),i([o({constructOnly:!0})],a.prototype,"view",void 0),i([o({readOnly:!0})],a.prototype,"updating",null),i([o({readOnly:!0})],a.prototype,"availability",void 0),a=i([g("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],a);let l=class extends _{get updating(){return this._i3sSources.some(r=>r.updating)}constructor(r){super(r),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(r=>r.destroy()),this._i3sSources.length=0}initialize(){const{view:r}=this,e=this.layerSource.layer;this._i3sSources=e.type==="building-scene"?this._getBuildingSceneI3SSources(r,e):[this._getSceneLayerI3SSource(r,e)]}async fetchCandidates(r,e){const t=await Promise.all(this._i3sSources.map(s=>s.fetchCandidates(r,e)));return E(e),t.flat()}refresh(){this._i3sSources.forEach(r=>r.refresh())}_getBuildingSceneI3SSources(r,e){return e.allSublayers.toArray().map(t=>t.type==="building-component"?new a({getLayerView:async()=>(await r.whenLayerView(e)).whenSublayerView(t),view:r}):null).filter(I)}_getSceneLayerI3SSource(r,e){return new a({getLayerView:async()=>{const t=await r.whenLayerView(e);return t.type==="scene-layer-graphics-3d"?void 0:t},view:r})}};i([o({constructOnly:!0})],l.prototype,"layerSource",void 0),i([o({constructOnly:!0})],l.prototype,"view",void 0),i([o({readOnly:!0})],l.prototype,"updating",null),i([o({readOnly:!0})],l.prototype,"availability",void 0),l=i([g("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],l);export{l as SceneLayerSnappingSource};
