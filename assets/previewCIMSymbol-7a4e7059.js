import{g0 as w,g1 as F,fV as M}from"./index-70a1e848.js";import{l as O,n as d}from"./cimAnalyzer-eedeb732.js";import{CIMSymbolRasterizer as j}from"./CIMSymbolRasterizer-1eb30544.js";import{t as b,l as G}from"./symbolUtils-67cc8a74.js";import"./labelPoint-454a2ef5.js";import"./TileClipper-ae6eca9e.js";import"./definitions-24b8f578.js";import"./number-e491b09e.js";import"./BidiEngine-9a40f2f4.js";import"./rasterizingUtils-92b6527e.js";import"./utils-e4f79b61.js";const f=new j(null,!0),u=w(b.size),v=w(b.maxSize),S=w(b.lineWidth),R=1;async function V(n,t,r){const l=t?.size;let e=l!=null&&typeof l=="object"&&"width"in l?l.width:l,a=l!=null&&typeof l=="object"&&"height"in l?l.height:l;if(e==null||a==null)if(r==="esriGeometryPolygon")e=u,a=u;else{const i=await $(n,t,r);i&&(e=i.width,a=i.height),r==="esriGeometryPolyline"&&(e=S),e=e!=null&&isFinite(e)?Math.min(e,v):u,a=a!=null&&isFinite(a)?Math.max(Math.min(a,v),R):u}return t.style==="legend"&&r==="esriGeometryPolyline"&&(e=S),{width:e,height:a}}async function $(n,t,r){const{feature:l,fieldMap:e,viewParams:a}=t.cimOptions||t,i=await O.resolveSymbolOverrides(n.data,l,null,e,r,null,a);if(!i)return null;(n=n.clone()).data={type:"CIMSymbolReference",symbol:i},n.data.primitiveOverrides=void 0;const o=[];return d.fetchResources(i,f.resourceManager,o),d.fetchFonts(i,f.resourceManager,o),o.length>0&&await Promise.all(o),d.getEnvelope(i,null,f.resourceManager)}async function K(n,t={}){const{node:r,opacity:l,symbolConfig:e}=t,a=e!=null&&typeof e=="object"&&"isSquareFill"in e&&e.isSquareFill,i=t.cimOptions||t,o=i.geometryType||F(n?.data?.symbol),p=await V(n,t,o),{feature:C,fieldMap:P}=i,I=a||o!=="esriGeometryPolygon"?"preview":"legend",h=await f.rasterizeCIMSymbolAsync(n,C,p,I,P,o,null,i.viewParams,i.allowScalingUp);if(!h)return null;const{width:L,height:x}=h,m=document.createElement("canvas");m.width=L,m.height=x,m.getContext("2d").putImageData(h,0,0);const y=M(p.width),g=M(p.height),s=new Image(y,g);s.src=m.toDataURL(),s.ariaLabel=t.ariaLabel??null,s.alt=t.ariaLabel??"",l!=null&&(s.style.opacity=`${l}`);let c=s;if(t.effectView!=null){const z={shape:{type:"image",x:0,y:0,width:y,height:g,src:s.src},fill:null,stroke:null,offset:[0,0]};c=G([[z]],[y,g],{effectView:t.effectView,ariaLabel:t.ariaLabel})}return r&&c&&r.appendChild(c),c}export{K as previewCIMSymbol};
