import{aD as l,am as c,as as h,aE as u,ah as i,ai as t,ak as d}from"./index-8b5e7d9b.js";import{n as m}from"./LayerView3D-239175ff.js";import{c as g,r as y}from"./queryForSymbologySnapping-44fbc011.js";import{O as f}from"./GraphicsProcessor-ef5fbca1.js";import{l as b}from"./projectExtentUtils-4faf6b68.js";import{u as v}from"./LayerView-840504cd.js";import"./elevationInfoUtils-25b84599.js";import"./diffUtils-3ed1f592.js";import"./Query-630c5d65.js";import"./Graphics3DObjectStates-b80419b4.js";import"./UniqueValueRenderer-176db886.js";import"./ColorStop-ac9a118d.js";import"./colorRamps-cf6fa9ce.js";import"./jsonUtils-3d6448c4.js";import"./DictionaryLoader-1a1ab2cc.js";import"./FieldsIndex-85e142d0.js";import"./heatmapUtils-3c0e0ece.js";import"./defaults-4b2d7493.js";import"./defaultsJSON-59981e75.js";import"./optimizedFeatureQueryEngineAdapter-717c64bf.js";import"./PooledRBush-05d409af.js";import"./quickselect-fc5bb707.js";import"./popupUtils-049df13a.js";let s=class extends m(v){constructor(){super(...arguments),this.type="graphics-3d",this.symbologySnappingSupported=!0,this._slicePlaneEnabled=!1,this.fullExtentInLocalViewSpatialReference=null,this.ignoresMemoryFactor=!0}initialize(){this._set("processor",new f({owner:this,scaleVisibilityEnabled:!0,frustumVisibilityEnabled:!0})),this.addResolvingPromise(this.processor.initializePromise),this.addHandles(this.layer.on("graphic-update",e=>this.processor.graphicsCore.graphicUpdateHandler(e))),this.addResolvingPromise(b(this).then(e=>this.fullExtentInLocalViewSpatialReference=e)),this.layer.internal?this.notifyChange("updating"):this.addHandles(l(()=>this.view?.basemapTerrain?.ready,()=>()=>this.notifyChange("updating"),{once:!0}))}destroy(){this._updatingHandles.removeAll(),this._set("processor",c(this.processor))}get loadedGraphics(){return this.layer.graphics}get legendEnabled(){return this.canResume()&&!this.processor?.frustumVisibilitySuspended}get slicePlaneEnabled(){const e=this.layer.internal;return this._slicePlaneEnabled&&!e}set slicePlaneEnabled(e){this._slicePlaneEnabled=e}getSuspendInfo(){const e=super.getSuspendInfo();return e.outsideScaleRange=this.processor?.scaleVisibilitySuspended??!1,e.outsideOfView=this.processor?.frustumVisibilitySuspended??!1,e}async fetchPopupFeatures(e,r){return r?.clientGraphics??[]}getHit(e){return this.processor.getHit(e)}whenGraphicBounds(e,r){return this.processor.whenGraphicBounds(e,r)}computeAttachmentOrigin(e,r){return this.processor?.computeAttachmentOrigin(e,r)}getSymbolLayerSize(e,r){return this.processor.getSymbolLayerSize(e,r)}queryGraphics(){return Promise.resolve(this.loadedGraphics)}maskOccludee(e){return this.processor.maskOccludee(e)}highlight(e){return this.processor.highlight(e)}async elevationAlignPointsInFeatures(e,r){const{processor:o}=this;if(o?.graphics3DGraphics==null)throw new h("graphicslayerview3d:missing-processor","A Graphics3D processor is needed to resolve graphics elevation.");const{graphics3DGraphics:n}=o,p=a=>typeof a=="number"?n.get(a):void 0;return g(this.view,this.layer,p,e,r)}async queryForSymbologySnapping(e,r){return y(this.processor,e,r)}get updatePolicy(){return this.processor?.graphicsCore.effectiveUpdatePolicy||u.SYNC}canResume(){return super.canResume()&&!this.processor?.scaleVisibilitySuspended}isUpdating(){return this.view&&this.layer&&!(!this.processor?.updating&&(this.layer.internal||this.view.basemapTerrain?.ready))}get performanceInfo(){return{displayedNumberOfFeatures:this.loadedGraphics.length,maximumNumberOfFeatures:-1,totalNumberOfFeatures:-1,nodes:0,core:null,updating:this.updating,elevationUpdating:this.processor?.elevationAlignment.updating??!1,visibilityFrustum:!this.processor?.frustumVisibilitySuspended}}get usedMemory(){return this.processor?.graphicsCore?.usedMemory??0}get unloadedMemory(){return this.processor?.graphicsCore?.unprocessedMemoryEstimate}};i([t()],s.prototype,"loadedGraphics",null),i([t({readOnly:!0})],s.prototype,"legendEnabled",null),i([t()],s.prototype,"layer",void 0),i([t({readOnly:!0})],s.prototype,"processor",void 0),i([t()],s.prototype,"_slicePlaneEnabled",void 0),i([t({type:Boolean})],s.prototype,"slicePlaneEnabled",null),s=i([d("esri.views.3d.layers.GraphicsLayerView3D")],s);const $=s;export{$ as default};
